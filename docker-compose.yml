version: '3'
services:
    grafana:
        image: grafana/grafana:5.2.4
        container_name: grafana
        ports:
          - "3001:3000"
        volumes:
          # - grafana_data:/var/lib/grafana
          - ./grafana/provisioning/:/etc/grafana/provisioning/
        env_file:
          - ./grafana/config.monitoring
        # labels:
        #   - "traefik.frontend.rule=Host:grafana.docker.local"
        # network_mode: host

    prometheus:
        image: prom/prometheus:v2.4.0
        container_name: prometheus
        ports:
          - 9090:9090
        volumes:
          # - prometheus_data:/prometheus
          - ./prometheus:/etc/prometheus/           
        command: [ "--config.file=/etc/prometheus/prometheus.yml", 
                 "--storage.tsdb.path=/prometheus", 
                 "--storage.tsdb.retention=15d", 
                 "--web.enable-admin-api", 
                 "--web.enable-lifecycle",
                 "--web.console.libraries=/usr/share/prometheus/console_libraries", 
                 "--web.console.templates=/usr/share/prometheus/consoles" ]
        # network_mode: host

    alertmanager:
        image: prom/alertmanager:v0.15.2
        container_name: alertmanager        
        # depends_on: 
        #   - "ping"
        ports:
          - 9093:9093
        volumes:
          - ./prometheus/config.yml:/etc/alertmanager/alertmanager.yml
    
    consul:
        image: consul:1.1.0
        container_name: consul
        command: "consul agent -dev -client=0.0.0.0 -config-dir=/etc/consul.d"
        ports:
          - 8500:8500
        volumes:
          - ./consul.d:/etc/consul.d
        labels:
          # - traefik.frontend.rule=Host:consul.monitoring-with-prometheus.docker.local
          - traefik.port=8500
        # network_mode: host

    node-exporter:
        image: prom/node-exporter:latest
        container_name: node-exporter
        ports:
          - 9100:9100

    cadvisor:
        image: google/cadvisor:latest
        container_name: cadvisor
        ports:
          - 8095:8080
        volumes:
          - /:/rootfs:ro
          - /var/run:/var/run:rw
          - /sys:/sys:ro
          - /var/lib/docker/:/var/lib/docker:ro

    mailslurper:
        image: marcopas/docker-mailslurper
        container_name: mailslurper        
        ports:
          - 2500:2500
          - 9000:8080
          - 8085:8085
        volumes:
          - ./prometheus/mailslurper-config.json:/opt/mailslurper/config.json

    # ping:
    #     image: alpine
    #     container_name: ping
    #     command: ping -t 10 localhost

    # rabbitmq:
    #     image: rabbitmq:3-management
    #     container_name: rabbitmq
    #     ports:
    #       - 15672:15672 
    #       - 9191:9090
    
    # rabbitmq-exporter:
    #     image: kbudde/rabbitmq-exporter
    #     container_name: rabbitmq-exporter
    #     network_mode: "service:rabbitmq"
    #     depends_on: 
    #       - "rabbitmq"
    
    consul-exporter:
        image: prom/consul-exporter
        container_name: consul-exporter
        # network_mode: "service:consul"
        command: [ "--consul.server=consul:8500" ]
        ports:
          - 9107:9107

    blackbox-exporter:
        image: prom/blackbox-exporter
        container_name: blackbox-exporter
        ports:
          - 9115:9115

    github-exporter:
        tty: true
        stdin_open: true
        container_name: github-exporter
        ports:
          - 9171:9171
        image: infinityworks/github-exporter:latest 
        environment:
          - REPOS=kubernetes/kubernetes, moby/moby, grafana/grafana, prometheus/prometheus
          - GITHUB_TOKEN=d8b1e5d29410be2e114eb49f909cf6e908a127af

    coinmarketcap-exporter:
        image: bcawthra/coinmarketcap-exporter:latest
        container_name: coinmarketcap-exporter
        ports:
          - 9101:9101

    traefik:
        image: traefik:1.7
        container_name: traefik
        command: --api --docker --metrics.prometheus --docker.domain=docker.local --logLevel="DEBUG"
        ports:
          - 8000:80
          - 8080:8080
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
        # network_mode: host
volumes:
    prometheus_data: {}
    grafana_data: {}
